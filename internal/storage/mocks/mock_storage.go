// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/AlparslanKaraguney/trux-task/internal/entities"
	models "github.com/AlparslanKaraguney/trux-task/internal/models"
	filter "github.com/AlparslanKaraguney/trux-task/internal/storage/filter"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateSmartFeature mocks base method.
func (m *MockStorage) CreateSmartFeature(feature *models.SmartFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmartFeature", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSmartFeature indicates an expected call of CreateSmartFeature.
func (mr *MockStorageMockRecorder) CreateSmartFeature(feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartFeature", reflect.TypeOf((*MockStorage)(nil).CreateSmartFeature), feature)
}

// CreateSmartModel mocks base method.
func (m *MockStorage) CreateSmartModel(model *models.SmartModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSmartModel", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSmartModel indicates an expected call of CreateSmartModel.
func (mr *MockStorageMockRecorder) CreateSmartModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSmartModel", reflect.TypeOf((*MockStorage)(nil).CreateSmartModel), model)
}

// DeleteSmartFeature mocks base method.
func (m *MockStorage) DeleteSmartFeature(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSmartFeature", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSmartFeature indicates an expected call of DeleteSmartFeature.
func (mr *MockStorageMockRecorder) DeleteSmartFeature(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSmartFeature", reflect.TypeOf((*MockStorage)(nil).DeleteSmartFeature), id)
}

// DeleteSmartModel mocks base method.
func (m *MockStorage) DeleteSmartModel(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSmartModel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSmartModel indicates an expected call of DeleteSmartModel.
func (mr *MockStorageMockRecorder) DeleteSmartModel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSmartModel", reflect.TypeOf((*MockStorage)(nil).DeleteSmartModel), id)
}

// GetSmartFeature mocks base method.
func (m *MockStorage) GetSmartFeature(id int32) (*models.SmartFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSmartFeature", id)
	ret0, _ := ret[0].(*models.SmartFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSmartFeature indicates an expected call of GetSmartFeature.
func (mr *MockStorageMockRecorder) GetSmartFeature(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSmartFeature", reflect.TypeOf((*MockStorage)(nil).GetSmartFeature), id)
}

// GetSmartModel mocks base method.
func (m *MockStorage) GetSmartModel(id int32) (*models.SmartModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSmartModel", id)
	ret0, _ := ret[0].(*models.SmartModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSmartModel indicates an expected call of GetSmartModel.
func (mr *MockStorageMockRecorder) GetSmartModel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSmartModel", reflect.TypeOf((*MockStorage)(nil).GetSmartModel), id)
}

// ListSmartFeatures mocks base method.
func (m *MockStorage) ListSmartFeatures(filter *filter.SmartFeatureFilter) ([]models.SmartFeature, *entities.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSmartFeatures", filter)
	ret0, _ := ret[0].([]models.SmartFeature)
	ret1, _ := ret[1].(*entities.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSmartFeatures indicates an expected call of ListSmartFeatures.
func (mr *MockStorageMockRecorder) ListSmartFeatures(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSmartFeatures", reflect.TypeOf((*MockStorage)(nil).ListSmartFeatures), filter)
}

// ListSmartModels mocks base method.
func (m *MockStorage) ListSmartModels(filter *filter.SmartModelFilter) ([]models.SmartModel, *entities.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSmartModels", filter)
	ret0, _ := ret[0].([]models.SmartModel)
	ret1, _ := ret[1].(*entities.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSmartModels indicates an expected call of ListSmartModels.
func (mr *MockStorageMockRecorder) ListSmartModels(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSmartModels", reflect.TypeOf((*MockStorage)(nil).ListSmartModels), filter)
}

// UpdateSmartFeature mocks base method.
func (m *MockStorage) UpdateSmartFeature(feature *models.SmartFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSmartFeature", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSmartFeature indicates an expected call of UpdateSmartFeature.
func (mr *MockStorageMockRecorder) UpdateSmartFeature(feature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSmartFeature", reflect.TypeOf((*MockStorage)(nil).UpdateSmartFeature), feature)
}

// UpdateSmartModel mocks base method.
func (m *MockStorage) UpdateSmartModel(model *models.SmartModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSmartModel", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSmartModel indicates an expected call of UpdateSmartModel.
func (mr *MockStorageMockRecorder) UpdateSmartModel(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSmartModel", reflect.TypeOf((*MockStorage)(nil).UpdateSmartModel), model)
}
